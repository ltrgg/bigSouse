{"remainingRequest":"D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\babel-loader\\lib\\index.js!D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\src\\App3.vue?vue&type=script&lang=js&","dependencies":[{"path":"D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\src\\App3.vue","mtime":1595773953000},{"path":"D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665563423068},{"path":"D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\babel-loader\\lib\\index.js","mtime":1665563427105},{"path":"D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1665563423068},{"path":"D:\\练习\\大文件上传\\大文件上传和断点续传\\客户端\\node_modules\\vue-loader\\lib\\index.js","mtime":1665563427303}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["App3.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <div id=\"app\">\n    <el-upload drag action :auto-upload=\"false\" :show-file-list=\"false\" :on-change=\"changeFile\">\n      <i class=\"el-icon-upload\"></i>\n      <div class=\"el-upload__text\">\n        将文件拖到此处，或\n        <em>点击上传</em>\n      </div>\n    </el-upload>\n\n    <!-- PROGRESS -->\n    <div class=\"progress\">\n      <span>上传进度：{{total|totalText}}%</span>\n      <el-link type=\"primary\" v-if=\"total>0 && total<100\" @click=\"handleBtn\">{{btn|btnText}}</el-link>\n    </div>\n\n    <!-- VIDEO -->\n    <div class=\"uploadImg\" v-if=\"video\">\n      <video :src=\"video\" controls />\n    </div>\n  </div>\n</template>\n\n<script>\nimport { fileParse } from \"./assets/utils\";\nimport axios from \"axios\";\nimport SparkMD5 from \"spark-md5\";\n\nexport default {\n  name: \"App\",\n  data() {\n    return {\n      total: 0,\n      video: null,\n      btn: false,\n    };\n  },\n  filters: {\n    btnText(btn) {\n      return btn ? \"继续\" : \"暂停\";\n    },\n    totalText(total) {\n      return total > 100 ? 100 : total;\n    },\n  },\n  methods: {\n    async changeFile(file) {\n      if (!file) return;\n      file = file.raw;\n\n      // 解析为BUFFER数据\n      // 我们会把文件切片处理：把一个文件分割成为好几个部分（固定数量/固定大小）\n      // 每一个切片有自己的部分数据和自己的名字\n      // HASH_1.mp4\n      // HASH_2.mp4\n      // ...\n      let buffer = await fileParse(file, \"buffer\"),\n        spark = new SparkMD5.ArrayBuffer(),\n        hash,\n        suffix;\n      spark.append(buffer);\n      hash = spark.end();\n      suffix = /\\.([0-9a-zA-Z]+)$/i.exec(file.name)[1];\n\n      // 创建100个切片\n      let partList = [],\n        partsize = file.size / 100,\n        cur = 0;\n      for (let i = 0; i < 100; i++) {\n        let item = {\n          chunk: file.slice(cur, cur + partsize),\n          filename: `${hash}_${i}.${suffix}`,\n        };\n        cur += partsize;\n        partList.push(item);\n      }\n\n      this.partList = partList;\n      this.hash = hash;\n      this.sendRequest();\n    },\n    async sendRequest() {\n      // 根据100个切片创造100个请求（集合）\n      let requestList = [];\n      this.partList.forEach((item, index) => {\n        // 每一个函数都是发送一个切片的请求\n        let fn = () => {\n          let formData = new FormData();\n          formData.append(\"chunk\", item.chunk);\n          formData.append(\"filename\", item.filename);\n          return axios\n            .post(\"/single3\", formData, {\n              headers: { \"Content-Type\": \"multipart/form-data\" },\n            })\n            .then((result) => {\n              result = result.data;\n              if (result.code == 0) {\n                this.total += 1;\n                // 传完的切片我们把它移除掉\n                this.partList.splice(index, 1);\n              }\n            });\n        };\n        requestList.push(fn);\n      });\n\n      // 传递：并行(ajax.abort())/串行(基于标志控制不发送)\n      let i = 0;\n      let complete = async () => {\n        let result = await axios.get(\"/merge\", {\n          params: {\n            hash: this.hash,\n          },\n        });\n        result = result.data;\n        if (result.code == 0) {\n          this.video = result.path;\n        }\n      };\n      let send = async () => {\n        // 已经中断则不再上传\n        if (this.abort) return;\n        if (i >= requestList.length) {\n          // 都传完了\n          complete();\n          return;\n        }\n        await requestList[i]();\n        i++;\n        send();\n      };\n      send();\n    },\n    handleBtn() {\n      if (this.btn) {\n        //断点续传\n        this.abort = false;\n        this.btn = false;\n        this.sendRequest();\n        return;\n      }\n      //暂停上传\n      this.btn = true;\n      this.abort = true;\n    },\n  },\n};\n</script>"],"sourceRoot":"src"}]}